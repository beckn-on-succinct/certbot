{
    "name": "status_updates",
    "steps" : [
        {
            "name": "getEcommerceOrderId",
            "request_finalizer" : ["var Util = Java.type('in.humbhionline.certbot.exports.Util');",
                                    "Util.sleep(6000)",
                                    "imf = {\"BecknOrderMeta\":[\"ECommerceOrderId\"] }",
                                     "request.headers.IncludedModelFields = Util.btoa(JSON.stringify(imf))"],
            "request" : {
                "url" : "https://preprod-wiggles.humbhionline.in/beckn_order_metas/search?q=BECKN_TRANSACTION_ID%3A%22${confirm.request.body.context.transaction_id}%22+AND+SUBSCRIBER_ID%3A%22${context.bpp_id}%22",
                "method" : "get",
                "headers": {
                    "Content-type": "application/json" ,
                    "X-ApiKey" : "${bpp.x_api_key}"
                }
            },
            "assertion" : {
                "script": {
                    "eval": "getEcommerceOrderId.response.status == 200"
                }
            },
            "logs": [
                {
                    "name": "beckn_order_meta.log",
                    "value": "${JSON.stringify(getEcommerceOrderId.response)}"
                }
            ]
        },
        {
            "name": "updateInvoiceUrl",
            "request_finalizer" : [
                "var d = new Date(); m = 3 * Math.floor(d.getMonth()/3) + 1 ; ",
                "request.url = bpp.shopify.store_url + '/admin/api/' + d.getFullYear() + '-' + ('00'+m).slice(-2) + '/graphql.json'"
            ],
            "request": {
                "method": "post",
                "headers": {
                    "Content-Type": "application/json",
                    "X-Shopify-Access-Token": "${bpp.shopify.access_token}"
                },
                "body": {
                    "query": "mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) { metafieldsSet(metafields: $metafields) { metafields { key namespace value createdAt updatedAt } userErrors { field message code } } }",
                    "variables": {
                        "metafields": [
                            {
                                "key": "invoice_url",
                                "namespace": "ondc",
                                "ownerId": "gid://shopify/Order/${getEcommerceOrderId.response.data.BecknOrderMetas[0].ECommerceOrderId}",
                                "type": "file_reference",
                                "value": "gid://shopify/GenericFile/34423717921062"
                            }
                        ]
                    }
                }
            },
            "assertion": {
                "script": {
                    "eval": "updateInvoiceUrl.response.status === 200 "
                }
            },
            "logs": [
                {
                    "name": "updateInvoiceUrl.response.log",
                    "value": "${JSON.stringify(updateInvoiceUrl.response)}"
                },
                {
                    "name": "updateInvoiceUrl.request.log",
                    "value": "${JSON.stringify(updateInvoiceUrl.request)}"
                }
            ]
        },
        {
            "name": "getFulfillmentOrderId",
            "request" : {
                "url" : "${updateInvoiceUrl.request.url}",
                "method" : "post",
                "headers": {
                    "Content-Type" : "application/json",
                    "X-Shopify-Access-Token" : "${bpp.shopify.access_token}"
                },
                "body" : {
                    "query" : "query { order(id: \"gid://shopify/Order/${getEcommerceOrderId.response.data.BecknOrderMetas[0].ECommerceOrderId}\") { id name fulfillmentOrders(first:10){ edges {node {id status}} } } }"
                }

            },
            "assertion" : {
                "script" : { "eval" :  "getFulfillmentOrderId.response.status == 200"}
            },
            "logs": [
                {
                    "name": "getFulfillmentOrderId.request.log",
                    "value": "${JSON.stringify(getFulfillmentOrderId.request)}"
                },
                {
                    "name": "getFulfillmentOrderId.response.log",
                    "value": "${JSON.stringify(getFulfillmentOrderId.response)}"
                }
            ]
        },
        {
            "name" : "createFulfillment",
            "request_finalizer"  : [
                "var Util = Java.type('in.humbhionline.certbot.exports.Util');",
                "Util.sleep(6000)",
                "var d = new Date(); m = 3 * Math.floor(d.getMonth()/3) + 1 ; ",
                "fulfillmentOrderId  = getFulfillmentOrderId.response.data.data.order.fulfillmentOrders.edges[0].node.id",
                "ifulfillmentOrderId = fulfillmentOrderId.substr(fulfillmentOrderId.lastIndexOf('/')+1)",
                "request.body.fulfillment.line_items_by_fulfillment_order.push({ \"fulfillment_order_id\":ifulfillmentOrderId})",
                "request.url = bpp.shopify.store_url + '/admin/api/' + d.getFullYear() + '-' + ('00'+m).slice(-2) + '/fulfillments.json'"
            ],
            "request": {
                "headers": {
                    "Content-Type" : "application/json",
                    "X-Shopify-Access-Token" : "${bpp.shopify.access_token}"
                },
                "method" :"post",
                "body" : {
                    "fulfillment" : {
                        "line_items_by_fulfillment_order" : []
                    }
                }
            },
            "assertion": {
                "script": {
                    "eval": "createFulfillment.response.status === 201 "
                }
            },
            "logs": [
                {
                    "name": "createFulfillment.request.log",
                    "value": "${JSON.stringify(createFulfillment.request)}"
                },
                {
                    "name": "createFulfillment.response.log",
                    "value": "${JSON.stringify(createFulfillment.response)}"
                }
            ]

        },
        {
            "name": "updateDelivered",
            "request_finalizer" : [
                "var Util = Java.type('in.humbhionline.certbot.exports.Util');",
                "Util.sleep(10000);// Need to do this to ensure that pending pick hook gets right status"
            ],
            "request" : {
                "method" : "post",
                "url":"${updateInvoiceUrl.request.url}",
                "headers": {
                    "Content-Type" : "application/json",
                    "X-Shopify-Access-Token" : "${bpp.shopify.access_token}"
                },
                "body" : {
                    "query": "mutation MetafieldsSet($metafields: [MetafieldsSetInput!]!) { metafieldsSet(metafields: $metafields) { metafields { key namespace value createdAt updatedAt } userErrors { field message code } } }",
                    "variables" : {
                        "metafields" : [{
                            "key" : "delivered",
                            "namespace" : "ondc",
                            "ownerId": "gid://shopify/Order/${getEcommerceOrderId.response.data.BecknOrderMetas[0].ECommerceOrderId}",
                            "type": "boolean",
                            "value":"true"
                        }]
                    }
                }
            },
            "assertion": {
                "script": {
                    "eval": "updateDelivered.response.status === 200 "
                }
            }
        },
        {
            "name" : "extract_logs",
            "flow" : "./src/test/resources/preprod-wiggles.humbhionline.in/extract_logs.json"
        }

    ]

}
